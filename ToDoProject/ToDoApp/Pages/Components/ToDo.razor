@page "/ToDo"
<h3>@HeaderName</h3>

<br />

<EditForm Model="task" OnValidSubmit="AddTask">
    <div class="row">
        
        <div class="col-auto d-flex">
            
            <input class="form-control me-2 custom-input" type="text" @bind-value="task.TaskName" style="width: 500px;" />
            
            <button class="btn btn-outline-primary custom-button" style="width: 100px;">Add Task</button>
        </div>
    </div>
</EditForm>


<div class="row mt-2">
    <div class="col-auto">
        <div class="progress my-2" style="width: 600px; height: 30px;">
            <div class="progress-bar custom-progress-bar" role="progressbar" style="width:@(percentageCompleted)%" aria-valuemax="100" aria-valuemin="0">
                @(percentageCompleted)%
            </div>
        </div>
    </div>
</div>

<ul class="list-group my-2">
    @foreach (var taskitem in taskList)
    {
        <li class="list-group-item mx-1 d-flex align-items-center custom-task-item" style="background-color: @(taskitem.IsComplete ? "gray" : "lightblue");" @onclick="(() => taskitem.IsComplete = !taskitem.IsComplete)">
            <input type="checkbox" class="me-2 custom-checkbox" @bind="taskitem.IsComplete" @onclick:stopPropagation="true" />
            @if (taskitem.IsComplete)
            {
                <del>@taskitem.TaskName</del>
            }
            else
            {
                @taskitem.TaskName
            }
        </li>
    }
</ul>

@code {
    protected List<TaskModel> taskList = new List<TaskModel>();
    protected TaskModel task = new TaskModel();

    protected override void OnInitialized()
    {
        if (HeaderName == "")
        {
            HeaderName = "ToDo";
        }
    }

    [Parameter]
    public string HeaderName { get; set; }

    public void AddTask()
    {
        if (!string.IsNullOrEmpty(task.TaskName))
        {
            taskList.Add(task);
            task = new TaskModel();
        }
    }

    public int percentageCompleted
    {
        get
        {
            return taskList.Count > 0 ? (taskList.Count(x => x.IsComplete) * 100 / taskList.Count) : 0;
        }
    }
}
